[
{
	"uri": "//localhost:1313/vi/1-create-new-aws-account/",
	"title": "Bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị cho Serverless Failover Architecture Trước khi bắt đầu xây dựng kiến trúc Serverless Failover, chúng ta cần chuẩn bị một số thành phần cơ bản:\nYêu cầu trước khi bắt đầu Tài khoản AWS: Đảm bảo bạn có tài khoản AWS với quyền Administrator Tên miền: Chuẩn bị một tên miền để cấu hình Route 53 (tùy chọn) Kiến thức cơ bản: Hiểu biết về các dịch vụ AWS cơ bản Các Region sẽ sử dụng Trong bài lab này, chúng ta sẽ sử dụng 2 Region:\nPrimary Region: Singapore (ap-southeast-1) Secondary Region: Tokyo (ap-northeast-1) Kiến trúc tổng quan Chúng ta sẽ xây dựng một ứng dụng serverless có khả năng failover tự động với các thành phần:\nDynamoDB Global Tables: Lưu trữ dữ liệu đồng bộ giữa các Region Lambda Functions: Xử lý logic backend API Gateway: Cung cấp REST API endpoints Route 53: DNS failover và health checks S3: Hosting website tĩnh Nội dung:\nĐăng kí tên miền tại TENTEN.VN Hosting trên DATAONLINE.VN Sử dụng Cloudflare để quản lý tên miền) "
},
{
	"uri": "//localhost:1313/vi/1-create-new-aws-account/1.1-find-account-id/",
	"title": "Đăng kí tên miền tại TENTEN.VN",
	"tags": [],
	"description": "",
	"content": "Đầu tiên, bạn cần đăng ký một tên miền trên trang tenten.vn. Sau khi truy cập vào website chính thức, hãy tìm kiếm tên miền mà bạn mong muốn, ví dụ như turtleclouds.id.vn. Nếu tên miền này vẫn còn trống, bạn có thể tiến hành đăng ký bằng cách điền thông tin cá nhân hoặc doanh nghiệp đầy đủ, sau đó thực hiện thanh toán trực tuyến. Ngay sau khi hoàn tất, hệ thống sẽ gửi cho bạn thông tin quản lý tên miền qua email, cho phép bạn toàn quyền kiểm soát các bản ghi DNS cũng như thiết lập Nameserver.\nNội dung 1. Vào trang chủ tenten.vn hoặc vào xem video hướng dẫn sau theo đường link này đăng ký tên miền và hosting miễn phí từ tenten.vn 2. Sau khi đăng kí tên miền thành công có thể kiểm tra theo các bước sau Click theo hướng dẫn các ảnh Bạn sẽ thấy tên miền của bản thân đã đăng ký và trang thái hoạt động là thành công Lưu ý: Quá trình từ lúc đăng kí tên miền đến khi nhận được email xác nhận thành công có thể mất đến 1 ngày\n"
},
{
	"uri": "//localhost:1313/vi/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Kích hoạt Global Tables và thêm Region phụ",
	"tags": [],
	"description": "",
	"content": "Amazon DynamoDB Global Tables Amazon DynamoDB Global Tables là một tính năng cho phép nhân bản dữ liệu tự động đa Region. Khi bạn bật Global Tables, dữ liệu được ghi ở một Region sẽ được tự động sao chép sang các Region khác theo mô hình multi-active (cả hai Region đều có thể đọc/ghi).\nĐiều này giúp ứng dụng:\nTính sẵn sàng cao (High Availability): Nếu một Region gặp sự cố, ứng dụng vẫn có thể truy cập dữ liệu từ Region còn lại. Khả năng phục hồi sau thảm họa (Disaster Recovery – DR): Đảm bảo dữ liệu không bị gián đoạn và có thể khôi phục nhanh chóng. Hiệu suất toàn cầu: Người dùng ở các khu vực khác nhau có thể truy cập dữ liệu từ Region gần nhất để giảm độ trễ. Trong bài lab này, sau khi tạo bảng DynamoDB ở Region chính (ví dụ us-east-1), bạn sẽ bật Global Tables để tạo bản sao sang Region phụ (us-west-2). Khi hoàn tất, mọi thay đổi trên bảng ở một Region sẽ được đồng bộ gần như theo thời gian thực sang bảng ở Region còn lại.\nBước 2: Kích hoạt Global Tables và thêm Region phụ 1. Sau khi hoàn thành bước đầu, tiếp theo ta sẽ click vào bảng HighAvailabilityTable mới tạo 2. Trong bảng vừa tạo, chuyển đến tab Global Tables 3. Chọn Create replica → chọn Region dự phòng (ví dụ: Tokyo ap-northeast-1) 4. Sau khi tạo chúng ta sẽ đợi từ 3 - 5 phút để khởi tạo tài nguyên. Cuối cùng khi thấy \u0026ldquo;Replica\u0026rdquo; chuyển sang Status Active là thành công "
},
{
	"uri": "//localhost:1313/vi/6-setup-dns-route53-failover/6.1-setup-dns-delegation/",
	"title": "Quyết định DNS cho api.turtleclouds.id.vn",
	"tags": [],
	"description": "",
	"content": "Quyết định DNS cho api.turtleclouds.id.vn Để làm Step 6 đúng chuẩn lab (Route 53 health check + failover), ta chỉ cần giao quyền DNS của riêng subdomain api cho Route 53, còn gốc domain turtleclouds.id.vn vẫn ở Cloudflare.\nTại sao cần DNS Delegation? Tách biệt quản lý: API subdomain được quản lý bởi Route 53, domain chính vẫn ở Cloudflare Health Check: Route 53 có thể thực hiện health check và failover cho API endpoints Flexibility: Không ảnh hưởng đến các subdomain khác (www, mail, etc.) AWS Integration: Tích hợp tốt với các dịch vụ AWS khác Nội dung Tạo Route 53 Hosted Zone Lưu lại NS Records Cấu hình NS Records trên Cloudflare Kiểm tra DNS Delegation 1. Tạo Route 53 Hosted Zone Truy cập Route 53 trong AWS Console Chọn Hosted zones → Create hosted zone Cấu hình Hosted Zone:\nDomain name: api.turtleclouds.id.vn Type: Public hosted zone Comment: Subdomain for API Gateway failover Chọn Create hosted zone 2. Lưu lại NS Records Sau khi tạo hosted zone, Route 53 sẽ cấp 4 bản ghi NS (Name Server). Lưu lại các NS records này:\nns-xxxx.awsdns-xx.org\rns-xxxx.awsdns-xx.net\rns-xxxx.awsdns-xx.com\rns-xxxx.awsdns-xx.co.uk Lưu ý: Các NS records của bạn sẽ khác với ví dụ trên. Hãy copy chính xác các NS records mà Route 53 cấp cho hosted zone của bạn.\n3. Cấu hình NS Records trên Cloudflare Đăng nhập vào Cloudflare Dashboard Chọn domain turtleclouds.id.vn Vào DNS → Records Thêm NS Records:\nTạo 4 bản ghi NS, mỗi bản ghi cho một NS server của Route 53:\nBản ghi 1:\nType: NS Name: api Content: ns-xxxx.awsdns-xx.org TTL: Auto Bản ghi 2:\nType: NS Name: api Content: ns-xxxx.awsdns-xx.net TTL: Auto Bản ghi 3:\nType: NS Name: api Content: ns-xxxx.awsdns-xx.com TTL: Auto Bản ghi 4:\nType: NS Name: api Content: ns-xxxx.awsdns-xx.co.uk TTL: Auto Quan trọng: Đảm bảo Proxy status là DNS only (màu xám), không phải Proxied (màu cam) cho các NS records.\n4. Kiểm tra DNS Delegation Sau khi cấu hình, kiểm tra xem DNS delegation đã hoạt động chưa:\nSử dụng nslookup:\nnslookup -type=NS api.turtleclouds.id.vn Kết quả mong đợi:\nServer: 8.8.8.8\rAddress: 8.8.8.8#53\rNon-authoritative answer:\rapi.turtleclouds.id.vn nameserver = ns-xxxx.awsdns-xx.org.\rapi.turtleclouds.id.vn nameserver = ns-xxxx.awsdns-xx.net.\rapi.turtleclouds.id.vn nameserver = ns-xxxx.awsdns-xx.com.\rapi.turtleclouds.id.vn nameserver = ns-xxxx.awsdns-xx.co.uk. Sử dụng dig (Linux/Mac):\ndig NS api.turtleclouds.id.vn Kết quả Sau khi hoàn thành bước này:\n✅ Route 53 Hosted Zone đã được tạo cho api.turtleclouds.id.vn ✅ NS Records đã được cấu hình trên Cloudflare ✅ DNS Delegation hoạt động chính xác ✅ Subdomain api giờ được quản lý bởi Route 53 Chuẩn bị cho bước tiếp theo Từ giờ, mọi bản ghi DNS của *.api.turtleclouds.id.vn sẽ do Route 53 quản lý, trong khi phần còn lại (www, root, etc.) vẫn ở Cloudflare như hiện tại.\nTrong bước tiếp theo, chúng ta sẽ tạo SSL certificates cho domain này sử dụng AWS Certificate Manager.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Serverless Failover: DynamoDB, Lambda, API Gateway &amp; Route 53",
	"tags": [],
	"description": "",
	"content": "Serverless Failover: DynamoDB, Lambda, API Gateway \u0026amp; Route 53 Tổng quan Trong môi trường sản xuất (production), một trong những rủi ro lớn nhất là ngừng hoạt động (downtime) khi một AWS Region gặp sự cố. Đối với những ứng dụng yêu cầu tính sẵn sàng cao (High Availability – HA) và khả năng phục hồi sau thảm họa (Disaster Recovery – DR), việc triển khai hạ tầng đa Region là một chiến lược quan trọng.\nTrong bài lab này, bạn sẽ xây dựng một ứng dụng serverless đa Region, có khả năng:\nChịu lỗi (Fault-Tolerant): Ứng dụng vẫn hoạt động bình thường khi một thành phần bị lỗi. Khôi phục sau thảm họa (DR): Nếu Region chính (Primary) ngừng hoạt động, hệ thống sẽ tự động chuyển sang Region dự phòng (Secondary) mà không gián đoạn dịch vụ cho người dùng cuối. Mục tiêu chính là kết hợp nhiều dịch vụ serverless của AWS để hình thành một kiến trúc toàn diện, an toàn và tự động failover.\nKiến trúc của ứng dụng mà chúng ta sẽ xây dựng Các thành phần chính của kiến trúc 1. Amazon DynamoDB Global Tables Vai trò: Là hệ thống lưu trữ dữ liệu chính cho ứng dụng theo mô hình multi-region, multi-active.\nCách hoạt động: Mọi dữ liệu ghi ở Region này sẽ được tự động đồng bộ sang Region khác chỉ trong vài giây (ví dụ: Singapore ↔ Tokyo).\nLợi ích trong DR: Khi Primary Region gặp sự cố, Secondary Region vẫn có dữ liệu mới nhất để phục vụ người dùng. Nhờ đó, ứng dụng tránh được mất dữ liệu (zero data loss) và duy trì tính liên tục.\n2. AWS Lambda (Python Functions) Vai trò: Cung cấp lớp xử lý backend mà không cần quản lý hạ tầng máy chủ.\nCách hoạt động: Các Lambda function được triển khai song song ở cả hai Region, có nhiệm vụ đọc và ghi dữ liệu từ DynamoDB. Khi người dùng gọi API, Lambda sẽ thực thi logic và trả kết quả ngay.\nLợi ích trong DR: Vì Lambda thuộc loại serverless, AWS sẽ tự động đảm bảo tính sẵn sàng ở cả hai Region. Khi Route 53 chuyển hướng request, Lambda tại Region còn lại sẽ tiếp tục xử lý mà không cần thay đổi cấu hình thủ công.\n3. Amazon API Gateway Vai trò: Đóng vai trò là cửa ngõ API RESTful, kết nối giữa client và Lambda.\nCách hoạt động: API Gateway được triển khai ở cả Primary và Secondary Region, cung cấp các endpoint thống nhất (stage /prod). Ngoài ra còn hỗ trợ logging, throttling để kiểm soát request.\nLợi ích trong DR: Người dùng không cần biết API đang chạy ở Region nào. Khi failover xảy ra, Route 53 tự động chuyển DNS sang API Gateway của Region dự phòng, giúp trải nghiệm liền mạch.\n4. Amazon Route 53 Vai trò: Quản lý DNS và thực hiện failover dựa trên health check.\nCách hoạt động: Bạn sẽ cấu hình bản ghi DNS cho domain (ví dụ: api.example.com) trỏ tới API Gateway ở Primary Region, và bản ghi dự phòng (failover) trỏ tới Secondary. Route 53 liên tục giám sát endpoint chính, nếu phát hiện lỗi thì sẽ điều hướng sang Region còn lại.\nLợi ích trong DR: Việc chuyển hướng được thực hiện hoàn toàn tự động, đảm bảo zero downtime và giảm thiểu rủi ro gián đoạn dịch vụ cho người dùng.\n5. AWS Certificate Manager (ACM) Vai trò: Cấp và quản lý chứng chỉ SSL/TLS cho custom domain.\nCách hoạt động: ACM phát hành chứng chỉ miễn phí, sau đó chứng chỉ này được gắn vào API Gateway Custom Domain để kích hoạt HTTPS.\nLợi ích trong DR: Giúp mọi request từ client tới API luôn được bảo mật qua HTTPS, tuân thủ các tiêu chuẩn bảo mật và tạo niềm tin cho người dùng.\n6. Amazon S3 (Frontend Website Hosting) Vai trò: Lưu trữ và phân phát website tĩnh (HTML, CSS, JS).\nCách hoạt động: Website frontend được host trên một bucket S3, có thể kết hợp CloudFront để tăng tốc. Website này sẽ gọi API thông qua domain đã cấu hình với Route 53.\nLợi ích trong DR: Vì frontend được phân phát từ một nguồn tĩnh và ổn định, khi backend failover, website vẫn hoạt động bình thường. Người dùng sẽ tiếp tục sử dụng mà không cần thay đổi bất kỳ URL nào.\nNội dung chính Bước chuẩn bị Tạo bảng DynamoDB ở Region chính Tạo IAM Role cho Lambda Functions Tạo Lambda Functions ở cả hai Region Thiết lập API Gateway ở cả hai Region Thiết lập DNS Route 53 và cấu hình Failover cho API Gateway Create the Frontend Website Kiểm thử cơ chế chuyển đổi dự phòng bằng cách xóa API ở primary (Singapore) Xóa tài nguyên (Clean Up) "
},
{
	"uri": "//localhost:1313/vi/5-setup-api-gateway/5.1-create-api-primary-region/",
	"title": "Tạo API Gateway ở Region chính",
	"tags": [],
	"description": "",
	"content": "Tạo API Gateway ở Region chính (Singapore) Trong bước này, chúng ta sẽ tạo API Gateway ở Region chính (Singapore ap-southeast-1) để cung cấp REST API endpoints cho ứng dụng frontend.\nNội dung Truy cập API Gateway Console Tạo REST API mới Cấu hình thông tin cơ bản Tạo Resource Tạo GET Method (cho ReadFunction) Tạo POST Method (cho WriteFunction) Enable CORS cho Resource Deploy API Lưu lại Invoke URL Test API Endpoints 1. Truy cập API Gateway Console Đăng nhập AWS Management Console Đảm bảo bạn đang ở Region Singapore (ap-southeast-1) Tìm và chọn dịch vụ API Gateway 2. Tạo REST API mới Chọn Create API Trong phần REST API, chọn Build (không phải Private REST API) 3. Cấu hình thông tin cơ bản Choose the protocol: REST Create new API: New API API name: HighAvailabilityAPI Description: Primary Region API for Serverless Failover Endpoint Type: Regional Chọn Create API 4. Tạo Resource read Trong API vừa tạo, chọn Actions → Create Resource Resource Name: read Resource Path: /read Enable API Gateway CORS: ✅ (bật) Chọn Create Resource 5. Tạo Resource write Trong API vừa tạo, chọn Actions → Create Resource Resource Name: write Resource Path: /write Enable API Gateway CORS: ✅ (bật) Chọn Create Resource 6. Tạo GET Method (cho ReadFunction) Chọn resource /read vừa tạo Chọn Actions → Create Method Từ dropdown, chọn GET và click dấu ✅ Cấu hình Integration:\nIntegration type: Lambda Function Use Lambda Proxy integration: ✅ (bật) Lambda Region: ap-southeast-1 Lambda Function: ReadFunction Chọn Save 7. Tạo POST Method (cho WriteFunction) Chọn resource /write vừa tạo Chọn Actions → Create Method Từ dropdown, chọn POST và click dấu ✅ Cấu hình Integration:\nIntegration type: Lambda Function Use Lambda Proxy integration: ✅ (bật) Lambda Region: ap-southeast-1 Lambda Function: WriteFunction Chọn Save 8. Enable CORS cho Resource Chọn resource / Chọn Actions → Enable CORS Cấu hình CORS: Access-Control-Allow-Origin: * Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token 9. Deploy API Chọn Actions → Deploy API Deployment stage: [New Stage] Stage name: prod Stage description: Production stage for Primary Region Deployment description: Initial deployment Chọn Deploy 10. Lưu lại Invoke URL Sau khi deploy thành công, trong tab Stages → prod, bạn sẽ thấy Invoke URL:\nhttps://xxxxxxxxxx.execute-api.ap-southeast-1.amazonaws.com/prod Lưu lại URL này - chúng ta sẽ cần nó để:\nTest API functionality Cấu hình Route 53 health checks Tích hợp với frontend application "
},
{
	"uri": "//localhost:1313/vi/1-create-new-aws-account/1.2-update-account/",
	"title": "Hosting trên DATAONLINE.VN",
	"tags": [],
	"description": "",
	"content": "Tiếp theo, bạn cần chuẩn bị một dịch vụ hosting trên DataOnline để lưu trữ và vận hành website. Khi đăng ký gói hosting phù hợp, nhà cung cấp sẽ gửi cho bạn địa chỉ IP máy chủ cùng thông tin đăng nhập quản trị cPanel hoặc Plesk.\nNội dung Truy cập trang chủ DataOnline Đăng ký gói Hosting Đăng nhập Control Panel Quản lý DNS Tạo DNS Records 1. Vào trang chủ dataonline.vn hoặc vào xem video hướng dẫn sau theo đường link này Hosting miễn phí, chất lượng như host trả phí, host free không có quảng cáo tại Dataonline 2. Sau khi đăng ký gói Hosting chúng ta sẽ tạo các bản ghi 3. Click tiếp vào đăng nhập vào Control Panel Click thêm một lần nữa vào đăng nhập vào Control Panel 4. Tiếp đó ta click vào DNS Management 5. Cuối cùng ta tạo các 2 bản ghi Đầu tiên, hãy tạo bản ghi A record cho root domain (ký hiệu @), trỏ về địa chỉ IP máy chủ do DataOnline cung cấp. Sau đó, tiếp tục tạo thêm bản ghi A record cho tiền tố www, cũng trỏ về cùng IP hosting. Hai bản ghi này sẽ đảm bảo khi người dùng nhập vào trình duyệt địa chỉ turtleclouds.id.vn hoặc www.turtleclouds.id.vn , hệ thống đều điều hướng đúng về website được lưu trữ trên DataOnline.\n"
},
{
	"uri": "//localhost:1313/vi/6-setup-dns-route53-failover/6.2-acm-ssl-certificates/",
	"title": "Làm ACM DNS validation cho cả 2 region",
	"tags": [],
	"description": "",
	"content": "Làm ACM DNS validation cho cả 2 region Bạn đang dùng Regional API ở ap-southeast-1 (Singapore – chính) và ap-northeast-1 (Tokyo – phụ), nên cần 2 certificate, mỗi cái ở đúng region tương ứng.\nTại sao cần SSL Certificates cho cả hai Region? Regional Requirement: API Gateway Regional endpoints cần certificate ở cùng Region Custom Domain: Để sử dụng domain riêng thay vì URL AWS mặc định HTTPS Security: Đảm bảo tất cả API calls được mã hóa Failover Support: Cả hai Region đều cần có SSL để failover hoạt động Nội dung Tạo Certificate cho Singapore Region DNS Validation cho Singapore Tạo Certificate cho Tokyo Region DNS Validation cho Tokyo Kiểm tra Certificate Status 1. Tạo Certificate cho Singapore Region Đảm bảo bạn đang ở Region Singapore (ap-southeast-1) Truy cập AWS Certificate Manager (ACM) Chọn Request a certificate Cấu hình Certificate:\nCertificate type: Request a public certificate Chọn Next Domain names:\nFully qualified domain name: api.turtleclouds.id.vn Nếu cần thêm SAN (Subject Alternative Names): www.api.turtleclouds.id.vn Validation method: DNS validation Key algorithm: RSA 2048 Chọn Request 2. DNS Validation cho Singapore ACM sẽ hiển thị thông tin validation. Bạn sẽ thấy một bản ghi CNAME cần tạo:\nVí dụ CNAME record:\nName: _4724b28c2f251eaf0f8e5de086a13395.api.turtleclouds.id.vn Value: _d527ab199f33beee1a7c9dedf48c932a.xlfgrmvvlj.acm-validations.aws 👉 Ở giao diện ACM, chọn Create records in Route 53 để tạo tự động. Tạo bản ghi DNS trong Route 53 Khi bấm nút, ACM sẽ mở giao diện tạo bản ghi DNS trên Route 53.\nDomain: api.turtleclouds.id.vn\nValidation status*: Pending validation\nChọn Create records để xác nhận. Xác minh trạng thái Sau khi tạo xong, quay lại màn hình chi tiết certificate trong ACM.\nTrạng thái sẽ là Pending validation.\nSau vài phút, khi DNS propagation hoàn tất, ACM sẽ tự động đổi sang Issued. Lưu ý: Vì subdomain api.* đã được ủy quyền DNS cho Route 53, bạn tạo bản ghi CNAME trực tiếp trong Route 53 (zone: api.turtleclouds.id.vn), không cần thao tác ở Cloudflare.\n3. Tạo Certificate cho Tokyo Region Chuyển sang Region Tokyo (ap-northeast-1) Truy cập AWS Certificate Manager (ACM) Lặp lại các bước tương tự như Singapore Cấu hình Certificate:\nDomain name: api.turtleclouds.id.vn Validation method: DNS validation Key algorithm: RSA 2048 Chọn Request 4. DNS Validation cho Tokyo ACM Tokyo sẽ cung cấp một CNAME record khác để validation:\nVí dụ CNAME record cho Tokyo:\nName: _8956c39d4e362bfb2c9f7a180b24567e.api.turtleclouds.id.vn Value: _f638bc210e44ceef2d8d0f57f49c843b.ylfgrmvvlj.acm-validations.aws 👉 Ở giao diện ACM, chọn Create records in Route 53 để tạo tự động.\nTạo bản ghi DNS trong Route 53 Khi bấm nút, ACM sẽ mở giao diện tạo bản ghi DNS trên Route 53.\nDomain: api.turtleclouds.id.vn\nValidation status*: Pending validation\nChọn Create records để xác nhận.\nXác minh trạng thái Sau khi tạo xong, quay lại màn hình chi tiết certificate trong ACM.\nTrạng thái sẽ là Pending validation.\nSau vài phút, khi DNS propagation hoàn tất, ACM sẽ tự động đổi sang Issued.\nLưu ý: Vì subdomain api.* đã được ủy quyền DNS cho Route 53, bạn tạo bản ghi CNAME trực tiếp trong Route 53 (zone: api.turtleclouds.id.vn), không cần thao tác ở Cloudflare.\n5. Kiểm tra Certificate Status Kiểm tra Singapore Certificate:\nQuay lại ACM trong Region Singapore Đợi status chuyển từ Pending validation → Issued (thường 2-10 phút) Kiểm tra Tokyo Certificate:\nChuyển sang ACM trong Region Tokyo Đợi status chuyển từ Pending validation → Issued Troubleshooting Nếu certificate không được issued sau 15 phút:\nKiểm tra CNAME records: Đảm bảo đã tạo đúng trong Route 53 Kiểm tra DNS propagation: Sử dụng nslookup để verify Kiểm tra TTL: Đảm bảo TTL không quá cao (khuyến nghị 300s) nslookup -type=CNAME _4724b28c2f251eaf0f8e5de086a13395.api.turtleclouds.id.vn Kết quả Sau khi hoàn thành bước này:\n✅ SSL Certificate đã được issued cho Singapore Region ✅ SSL Certificate đã được issued cho Tokyo Region ✅ DNS Validation hoạt động chính xác ✅ CNAME Records đã được tạo trong Route 53 Chuẩn bị cho bước tiếp theo Với 2 SSL certificates đã sẵn sàng, chúng ta có thể tạo Custom Domain Names cho API Gateway ở cả hai Region trong bước tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/5-setup-api-gateway/5.2-create-api-secondary-region/",
	"title": "Nhân bản API Gateway sang Region phụ",
	"tags": [],
	"description": "",
	"content": "Nhân bản API Gateway sang Region phụ (Tokyo) Trong bước này, chúng ta sẽ tạo API Gateway tương tự ở Region phụ (Tokyo ap-northeast-1) để đảm bảo tính sẵn sàng cao và khả năng failover.\nTại sao cần nhân bản API Gateway? High Availability: Nếu Primary Region gặp sự cố, Secondary Region vẫn có thể phục vụ Disaster Recovery: Đảm bảo zero downtime khi failover xảy ra Performance: Người dùng ở khu vực châu Á có thể truy cập từ Region gần hơn Load Distribution: Phân tán tải giữa các Region Nội dung Chuyển sang Region phụ Tạo API Gateway tương tự ở bước 5.1 Truy cập API Gateway Console Tạo REST API mới Cấu hình thông tin cơ bản Tạo Resource read Tạo Resource write Tạo GET Method (cho ReadFunction) Tạo POST Method (cho WriteFunction) Enable CORS cho Resource Deploy API Lưu lại Invoke URL 1. Chuyển sang Region phụ Trong AWS Console, chuyển Region từ Singapore sang Tokyo (ap-northeast-1) Truy cập dịch vụ API Gateway 2. Tạo API Gateway tương tự ở bước 5.1 3. Truy cập API Gateway Console Đăng nhập AWS Management Console Đảm bảo bạn đang ở Region Tokyo (ap-northeast-1) Tìm và chọn dịch vụ API Gateway 4. Tạo REST API mới Chọn Create API Trong phần REST API, chọn Build (không phải Private REST API) 5. Cấu hình thông tin cơ bản Choose the protocol: REST Create new API: New API API name: HighAvailabilityAPI Description: Primary Region API for Serverless Failover Endpoint Type: Regional Chọn Create API 6. Tạo Resource read Trong API vừa tạo, chọn Actions → Create Resource Resource Name: read Resource Path: /read Enable API Gateway CORS: ✅ (bật) Chọn Create Resource 7. Tạo Resource write Trong API vừa tạo, chọn Actions → Create Resource Resource Name: write Resource Path: /write Enable API Gateway CORS: ✅ (bật) Chọn Create Resource 8. Tạo GET Method (cho ReadFunction) Chọn resource /read vừa tạo Chọn Actions → Create Method Từ dropdown, chọn GET và click dấu ✅ Cấu hình Integration:\nIntegration type: Lambda Function Use Lambda Proxy integration: ✅ (bật) Lambda Region: Tokyo (ap-northeast-1) Lambda Function: ReadFunction Chọn Save 9. Tạo POST Method (cho WriteFunction) Chọn resource /write vừa tạo Chọn Actions → Create Method Từ dropdown, chọn POST và click dấu ✅ Cấu hình Integration:\nIntegration type: Lambda Function Use Lambda Proxy integration: ✅ (bật) Lambda Region: Tokyo (ap-northeast-1) Lambda Function: WriteFunction Chọn Save 10. Enable CORS cho Resource Chọn resource / Chọn Actions → Enable CORS Cấu hình CORS:\nAccess-Control-Allow-Origin: * Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token 11. Deploy API Chọn Actions → Deploy API Deployment stage: [New Stage] Stage name: prod Stage description: Production stage for Primary Region Deployment description: Initial deployment Chọn Deploy 12. Lưu lại Invoke URL Sau khi deploy thành công, trong tab Stages → prod, bạn sẽ thấy Invoke URL:\nhttps://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod Lưu lại URL này - chúng ta sẽ cần nó để:\nTest API functionality Cấu hình Route 53 health checks Tích hợp với frontend application "
},
{
	"uri": "//localhost:1313/vi/2-mfa-setup-for-aws-user-root/",
	"title": "Tạo bảng DynamoDB ở Region chính",
	"tags": [],
	"description": "",
	"content": "Giới thiệu DynamoDB Amazon DynamoDB là dịch vụ cơ sở dữ liệu NoSQL được quản lý hoàn toàn (fully managed NoSQL database), cung cấp khả năng lưu trữ dữ liệu dạng key-value và document với độ trễ chỉ vài mili-giây ở mọi quy mô. Ưu điểm lớn của DynamoDB là tự động mở rộng (auto scaling), không cần quản lý máy chủ, và tích hợp sẵn tính năng bảo mật, backup, caching.\nTrong bài lab này, DynamoDB đóng vai trò là nền tảng lưu trữ chính của ứng dụng, đảm bảo dữ liệu được nhân bản tự động giữa nhiều Region thông qua Global Tables, giúp ứng dụng duy trì tính sẵn sàng và nhất quán ngay cả khi một Region gặp sự cố.\nNội dung Tạo bảng DynamoDB ở Region chính Kích hoạt Global Tables và thêm Region phụ Bước 1. Tạo bảng DynamoDB ở Region chính 1. Đăng nhập AWS Management Console 2. Vào dịch vụ DynamoDB 3. Tạo bảng mới trong Region chính (ví dụ: ap-southeast-1) Table name: HighAvailabilityTable\nPartition key: ItemId (String)\n4. Ta sẽ chọn \u0026ldquo;Default Settings\u0026rdquo; ở bảng Table Settings 5. Cuối cùng chọn \u0026ldquo;Create table\u0026rdquo; Đợi khoảng 2 - 3 phút để khởi tạo tài nguyên. Kiểm tra Status chuyển sang \u0026ldquo;Active\u0026rdquo; là thành công "
},
{
	"uri": "//localhost:1313/vi/1-create-new-aws-account/1.3-aws-account-alias/",
	"title": "Sử dụng Cloudflare để quản lý tên miền",
	"tags": [],
	"description": "",
	"content": "Sau khi đã trỏ tên miền turtleclouds.id.vn về địa chỉ IP hosting trên DataOnline, bước tiếp theo là sử dụng Cloudflare để quản lý và tối ưu tên miền. Cloudflare hoạt động như một lớp trung gian giữa người dùng và máy chủ, vừa giúp tăng tốc độ truy cập nhờ hệ thống CDN toàn cầu, vừa tăng cường bảo mật với tường lửa và chống tấn công DDoS. Trước tiên, bạn cần tạo một tài khoản miễn phí tại dash.cloudflare.com và thêm tên miền turtleclouds.id.vn vào hệ thống. Cloudflare sẽ tự động quét và nhập các bản ghi DNS hiện có, đồng thời cung cấp cho bạn hai Nameserver mới.\nNội dung Đăng nhập vào Cloudflare và nhập tên miền Cấu hình DNS Records Cập nhật Nameserver tại tenten.vn Kiểm tra kết quả Bước 1: Đăng nhập vào Cloudflare và nhập tên miền đã đăng kí , ở đây ví dụ turtleclouds.id.vn Bước 2: Vào bảng điều khiển chọn DNS tiếp đó chọn Records. Tiếp đó cọn Add records để thêm 2 bản ghi Bước 3: Cập nhật Nameserver tại tenten.vn Tiếp theo, bạn đăng nhập vào trang quản lý tên miền tại tenten.vn, tìm đến phần Quản lý Nameserver và thay đổi các Nameserver mặc định sang hai địa chỉ mà Cloudflare vừa cung cấp. Lưu lại thay đổi và chờ hệ thống cập nhật. Vào Thao tác tiếp đó chọn Cài đặt NS Thay đổi 2 bản ghi NS của tenten.vn bằng 2 bản ghi NS của Cloudflare và nhấn Cập nhật Bước 4:Bước kiểm tra cuối cùng Sau khi đã cấu hình Nameserver tại tenten.vn và hoàn tất thiết lập DNS trên Cloudflare, hãy mở Command Prompt hoặc PowerShell trên máy tính và sử dụng lệnh: ping turtleclouds.id.vn Kết quả "
},
{
	"uri": "//localhost:1313/vi/6-setup-dns-route53-failover/6.3-api-gateway-custom-domains/",
	"title": "Tạo Custom domain cho API Gateway (mỗi region một cái)",
	"tags": [],
	"description": "",
	"content": "Tạo Custom domain cho API Gateway (mỗi region một cái) Sau khi có SSL certificates ở cả hai Region, chúng ta sẽ tạo Custom Domain Names cho API Gateway để sử dụng domain riêng thay vì URL AWS mặc định.\nTại sao cần Custom Domain? Professional URL: Sử dụng api.turtleclouds.id.vn thay vì URL AWS dài SSL/TLS: Kích hoạt HTTPS với certificate riêng Branding: Thống nhất với brand và domain chính Failover Ready: Chuẩn bị cho Route 53 failover configuration Nội dung Tạo Custom Domain cho Singapore Region Cấu hình API Mapping cho Singapore Lưu Regional Domain Name Singapore Tạo Custom Domain cho Tokyo Region Cấu hình API Mapping cho Tokyo Lưu Regional Domain Name Tokyo 1. Tạo Custom Domain cho Singapore Region Đảm bảo bạn đang ở Region Singapore (ap-southeast-1) Truy cập API Gateway → Custom domain names Chọn Add domain names Cấu hình Custom Domain:\nDomain name: api.turtleclouds.id.vn Endpoint type: Regional ACM certificate: Chọn certificate Issued của Singapore Region Security policy: TLS 1.2 Chọn Add domain name 2. Cấu hình API Mapping cho Singapore Sau khi tạo custom domain, cần map với API Gateway:\nTrong custom domain vừa tạo, chọn tab API mappings Chọn Configure API mappings Thêm API Mapping:\nChọn Add new mapping API: Chọn HighAvailabilityAPI Stage: prod Path: để trống (root path) Chọn Save 3. Lưu Regional Domain Name Singapore Sau khi tạo custom domain, API Gateway sẽ sinh ra một Regional domain name. Lưu lại thông tin này:\nVí dụ Regional Domain Name:\nd-a7cx5xv22d.execute-api.ap-southeast-1.amazonaws.com Quan trọng: Regional domain name này sẽ được sử dụng trong Route 53 để tạo ALIAS records cho failover.\n4. Tạo Custom Domain cho Tokyo Region Chuyển sang Region Tokyo (ap-northeast-1) Truy cập API Gateway → Custom domain names Chọn Add domain names Cấu hình Custom Domain:\nDomain name: api.turtleclouds.id.vn Endpoint type: Regional ACM certificate: Chọn certificate Issued của Tokyo Region Security policy: TLS 1.2 Chọn Add domain name 5. Cấu hình API Mapping cho Tokyo Trong custom domain Tokyo, chọn tab API mappings Chọn Configure API mappings Thêm API Mapping:\nChọn Add new mapping API: Chọn HighAvailabilityAPI Stage: prod Path: để trống (root path) Chọn Save 6. Lưu Regional Domain Name Tokyo Lưu lại Regional domain name của Tokyo:\nVí dụ Regional Domain Name Tokyo:\nd-b8dy6yw33e.execute-api.ap-northeast-1.amazonaws.com Kết quả Sau khi hoàn thành bước này:\n✅ Custom Domain đã được tạo cho Singapore Region ✅ Custom Domain đã được tạo cho Tokyo Region ✅ API Mappings đã được cấu hình cho cả hai Region ✅ Regional Domain Names đã được lưu lại để sử dụng trong Route 53 Thông tin cần lưu Region Custom Domain Regional Domain Name Certificate Singapore api.turtleclouds.id.vn d-pbm3eqaneb.execute-api.ap-southeast-1.amazonaws.com ACM Singapore Tokyo api.turtleclouds.id.vn d-15ro7mhib1.execute-api.ap-northeast-1.amazonaws.com ACM Tokyo Chuẩn bị cho bước tiếp theo Với Custom Domains đã sẵn sàng, chúng ta có thể tạo Route 53 Health Checks và Failover Records trong bước cuối cùng.\n"
},
{
	"uri": "//localhost:1313/vi/3-create-admin-user-and-group/",
	"title": "Tạo IAM Role cho Lambda Functions",
	"tags": [],
	"description": "",
	"content": "Trong AWS, IAM Role giống như một “tập quyền” (permission set) được định nghĩa sẵn. Role không gắn cố định cho một người dùng cụ thể, mà được các dịch vụ AWS hoặc ứng dụng tạm thời “mượn” để có quyền thực hiện hành động.\nVí dụ:\nAWS Lambda cần một Role để có quyền đọc/ghi dữ liệu vào DynamoDB.\nEC2 Instance có thể gán một Role để truy cập S3 mà không cần lưu Access Key/Secret Key trong máy.\nĐiểm khác biệt so với IAM User:\nUser: gắn liền với một cá nhân hoặc ứng dụng, có username \u0026amp; password hoặc access key.\nRole: không có thông tin đăng nhập riêng, chỉ cấp quyền tạm thời cho dịch vụ hoặc user/ứng dụng assume (nhận) nó.\n👉 Trong bài lab này, bạn sẽ tạo một Role tên LambdaDynamoDBRole để cho phép Lambda Functions:\nTruy cập DynamoDB.\nGhi log vào CloudWatch.\nNội dung Mở IAM Console Tạo Role mới cho Lambda Gán quyền cho Role Đặt tên và tạo Role Lưu lại ARN của Role Tạo IAM Role cho Lambda Functions 1. Mở IAM Console Đăng nhập AWS Management Console.\nTìm và chọn dịch vụ IAM.\n2. Tạo Role mới cho Lambda Chọn Roles → Create role.\nỞ mục Trusted entity type, chọn AWS Service.\nChọn dịch vụ Lambda, sau đó bấm Next. 3. Gán quyền cho Role Tìm và chọn 2 policy:\nAmazonDynamoDBFullAccess → cho phép Lambda thao tác với DynamoDB.\nAWSLambdaBasicExecutionRole → cho phép Lambda ghi log lên CloudWatch. Nhấn Next 4. Đặt tên và tạo Role Nhập Role name: LambdaDynamoDBRole.\nNhấn Create role để hoàn tất.\nBạn đã tạo Role thành công 5. Lưu lại ARN của Role Sau khi tạo, mở chi tiết Role.\nCopy Role ARN (sẽ cần khi gán cho Lambda function sau này). "
},
{
	"uri": "//localhost:1313/vi/6-setup-dns-route53-failover/6.4-route53-health-check-failover/",
	"title": "Route 53 Health check + Failover record (trong zone api.turtleclouds.id.vn)",
	"tags": [],
	"description": "",
	"content": "Route 53 Health check + Failover record Bước cuối cùng là tạo Health Checks để giám sát tình trạng API endpoints và cấu hình Failover Records để tự động chuyển hướng traffic khi Primary Region gặp sự cố.\nTại sao cần Health Check và Failover? Automatic Monitoring: Route 53 liên tục kiểm tra tình trạng API endpoints Instant Failover: Tự động chuyển sang Secondary Region khi Primary fail Zero Manual Intervention: Không cần can thiệp thủ công High Availability: Đảm bảo 99.9% uptime cho API service Nội dung Tạo Health Check cho Primary Region Tạo Health Check cho Secondary Region Tạo Failover Record cho Primary Tạo Failover Record cho Secondary Test Failover Scenario 1. Tạo Health Check cho Primary Region Truy cập Route 53 → Health checks Chọn Create health check Cấu hình Health Check Primary:\nName: Primary Singapore What to monitor: Endpoint Specify endpoint by: Domain name Protocol: HTTPS Domain name: dynw0bc977.execute-api.ap-southeast-1.amazonaws.com/prod/read (API ID của Singapore) Request interval: Fast (10 seconds) Failure threshold: 3 Advanced configuration:\nEnable SNI: Yes Enable health checker regions: 3 region tại Asia Pacific: Asia Pacific (Tokyo) ✅\nAsia Pacific (Singapore) ✅\nAsia Pacific (Sydney) ✅\nQuan trọng: KHÔNG dùng Regional domain của custom domain (d-a7cx5xv22d.execute-api\u0026hellip;) cho Health Check vì có thể gây lỗi 403/401. Sử dụng invoke URL theo API ID thay thế.\n2. Tạo Health Check cho Secondary Region Chọn Create health check một lần nữa Cấu hình Health Check Secondary:\nName: Secondary Tokyo What to monitor: Endpoint Specify endpoint by: Domain name Protocol: HTTPS Domain name: qp3nkjwlde.execute-api.ap-northeast-1.amazonaws.com/prod/read (API ID của Tokyo) Request interval: Fast (10 seconds)\nFailure threshold: 3 Advanced configuration:\nEnable SNI: Yes Enable health checker regions: 3 region tại Asia Pacific: Asia Pacific (Tokyo) ✅\nAsia Pacific (Singapore) ✅\nAsia Pacific (Sydney) ✅\n3. Tạo Failover Record cho Primary Truy cập Route 53 → Hosted zones Chọn zone api.turtleclouds.id.vn Chọn Create record Cấu hình Primary Failover Record:\nRecord name: để trống (root của api.turtleclouds.id.vn) Record type: A Alias: Yes Route traffic to: Alias to API Gateway API Choose Region: Asia Pacific (Singapore) Choose API Gateway: Chọn API Gateway Singapore từ dropdown Routing policy: Failover Failover record type: Primary Health check: Chọn Primary Singapore Record ID: primary-ap-southeast-1 4. Tạo Failover Record cho Secondary Chọn Create record một lần nữa Cấu hình Secondary Failover Record:\nRecord name: để trống (root của api.turtleclouds.id.vn) Record type: A Alias: Yes Route traffic to: Alias to API Gateway API Choose Region: Asia Pacific (Tokyo) Choose API Gateway: Chọn API Gateway Tokyo từ dropdown Routing policy: Failover Failover record type: Secondary Health check: Chọn Secondary Tokyo Record ID: secondary-ap-northeast-1 Lưu ý: Nếu menu \u0026ldquo;Alias to API Gateway\u0026rdquo; không hiện, bạn có thể dùng Record type CNAME trỏ thẳng tới Regional domain của custom domain API Gateway.\nKiểm tra Health Check Status\nTruy cập Route 53 → Health checks Kiểm tra status của cả hai health checks Status Success có nghĩa là endpoint đang hoạt động bình thường Kết quả Sau khi hoàn thành bước này:\n✅ Health Checks đã được tạo cho cả hai Region ✅ Failover Records đã được cấu hình ✅ DNS Failover hoạt động tự động ✅ Custom Domain api.turtleclouds.id.vn đã sẵn sàng ✅ High Availability đã được đảm bảo "
},
{
	"uri": "//localhost:1313/vi/4-verify-new-account/",
	"title": "Tạo Lambda Functions ở cả hai Region",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon Lambda AWS Lambda là dịch vụ serverless compute của AWS. Với Lambda, bạn có thể chạy code mà không cần quản lý máy chủ – chỉ cần viết code, upload, và AWS sẽ tự động lo việc cấp phát tài nguyên, mở rộng (scaling), và tính phí theo số lần gọi hàm (invocations).\nMột số đặc điểm chính:\nKhông cần quản lý hạ tầng → AWS vận hành toàn bộ phần backend.\nTự động mở rộng → Lambda có thể xử lý từ vài request đến hàng nghìn request/giây.\nTích hợp chặt chẽ với các dịch vụ AWS khác (DynamoDB, S3, API Gateway, v.v.).\nChức năng Lambda trong bước này\nTrong bài lab này, Lambda đóng vai trò là lớp xử lý logic ứng dụng nằm giữa API Gateway và DynamoDB:\nReadFunction: đọc toàn bộ dữ liệu từ bảng DynamoDB và trả kết quả về dưới dạng JSON.\nWriteFunction: nhận dữ liệu từ request (qua API Gateway), sau đó ghi (put item) vào DynamoDB.\nTrong bước này, chúng ta sẽ tạo các Lambda Functions để xử lý logic backend cho ứng dụng ở cả hai Region (Primary và Secondary).\nNội dung Mở AWS Lambda Console Tạo hàm Lambda đọc dữ liệu (ReadFunction) Tạo hàm Lambda ghi dữ liệu (WriteFunction) Triển khai hàm ở Region phụ (Secondary Region) 1. Mở AWS Lambda Console Đăng nhập vào AWS Management Console.\nTìm và chọn dịch vụ Lambda.\n2. Tạo hàm Lambda đọc dữ liệu (ReadFunction) Chọn Create function.\nNhập cấu hình:\nFunction name: ReadFunction\nRuntime: Python 3.9\nExecution role: Chọn Use an existing role và chọn LambdaDynamoDBRole (đã tạo ở bước trước).\nExecution role: Chọn Use an existing role và chọn LambdaDynamoDBRole (đã tạo ở bước trước).\nCopy code sau và dán vào lambda_function.py.\nimport json import boto3 from boto3.dynamodb.conditions import Key from decimal import Decimal # Initialize DynamoDB resource dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;HighAvailabilityTable\u0026#39;) # Helper function to convert Decimal to regular types for JSON serialization def decimal_default(obj): if isinstance(obj, Decimal): return float(obj) raise TypeError def lambda_handler(event, context): # Handle preflight OPTIONS request for CORS if event.get(\u0026#39;httpMethod\u0026#39;) == \u0026#39;OPTIONS\u0026#39;: return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39;, \u0026#39;Access-Control-Max-Age\u0026#39;: \u0026#39;86400\u0026#39; }, \u0026#39;body\u0026#39;: \u0026#39;\u0026#39; } try: # Scan the table to get all items response = table.scan() items = response[\u0026#39;Items\u0026#39;] # Handle pagination if there are more items while \u0026#39;LastEvaluatedKey\u0026#39; in response: response = table.scan(ExclusiveStartKey=response[\u0026#39;LastEvaluatedKey\u0026#39;]) items.extend(response[\u0026#39;Items\u0026#39;]) # Sort items by ItemId for consistent ordering items.sort(key=lambda x: str(x.get(\u0026#39;ItemId\u0026#39;, \u0026#39;\u0026#39;))) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39;, \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache, no-store, must-revalidate\u0026#39;, \u0026#39;Pragma\u0026#39;: \u0026#39;no-cache\u0026#39;, \u0026#39;Expires\u0026#39;: \u0026#39;0\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps(items, default=decimal_default, ensure_ascii=False) } except Exception as e: print(f\u0026#34;Error reading data: {str(e)}\u0026#34;) # Log error for debugging return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: \u0026#39;Internal server error\u0026#39;, \u0026#39;message\u0026#39;: \u0026#39;Unable to read data from database\u0026#39; }, ensure_ascii=False) } Nhấn Deploy để lưu code. Bạn đã tạo hàm Lambda đọc dữ liệu (ReadFunction) thành công! 3. Tạo hàm Lambda ghi dữ liệu (WriteFunction) Chọn Create function lần nữa.\nNhập cấu hình:\nFunction name: WriteFunction\nRuntime: Python 3.9\nExecution role: chọn lại LambdaDynamoDBRole\nExecution role: Chọn Use an existing role và chọn LambdaDynamoDBRole Copy code sau và dán vào lambda_function.py.\nimport json import boto3 from datetime import datetime import uuid # Initialize DynamoDB resource dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;HighAvailabilityTable\u0026#39;) def lambda_handler(event, context): # Handle preflight OPTIONS request for CORS if event.get(\u0026#39;httpMethod\u0026#39;) == \u0026#39;OPTIONS\u0026#39;: return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39;, \u0026#39;Access-Control-Max-Age\u0026#39;: \u0026#39;86400\u0026#39; }, \u0026#39;body\u0026#39;: \u0026#39;\u0026#39; } try: # Parse request body if not event.get(\u0026#39;body\u0026#39;): raise ValueError(\u0026#39;Request body is required\u0026#39;) body = json.loads(event[\u0026#39;body\u0026#39;]) # Check if this is a DELETE action if body.get(\u0026#39;Action\u0026#39;) == \u0026#39;DELETE\u0026#39;: # Handle DELETE operation if \u0026#39;ItemId\u0026#39; not in body: raise ValueError(\u0026#39;ItemId is required for delete operation\u0026#39;) item_id = str(body[\u0026#39;ItemId\u0026#39;]).strip() if not item_id: raise ValueError(\u0026#39;ItemId cannot be empty\u0026#39;) # Check if item exists before deleting try: response = table.get_item(Key={\u0026#39;ItemId\u0026#39;: item_id}) if \u0026#39;Item\u0026#39; not in response: raise ValueError(f\u0026#39;Item with ID \u0026#34;{item_id}\u0026#34; not found\u0026#39;) except Exception as e: if \u0026#39;not found\u0026#39; in str(e): raise e else: print(f\u0026#34;Error checking item existence: {str(e)}\u0026#34;) # Delete from DynamoDB table.delete_item(Key={\u0026#39;ItemId\u0026#39;: item_id}) print(f\u0026#34;Successfully deleted item: {item_id}\u0026#34;) # Log for debugging return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: f\u0026#39;Đã xóa thành công item \u0026#34;{item_id}\u0026#34;!\u0026#39;, \u0026#39;itemId\u0026#39;: item_id, \u0026#39;action\u0026#39;: \u0026#39;DELETE\u0026#39;, \u0026#39;timestamp\u0026#39;: datetime.utcnow().isoformat() + \u0026#39;Z\u0026#39; }, ensure_ascii=False) } else: # Handle CREATE/UPDATE operation # Validate required fields if \u0026#39;ItemId\u0026#39; not in body or \u0026#39;Data\u0026#39; not in body: raise ValueError(\u0026#39;ItemId and Data are required fields\u0026#39;) item_id = str(body[\u0026#39;ItemId\u0026#39;]).strip() data = str(body[\u0026#39;Data\u0026#39;]).strip() # Validate input data if not item_id or not data: raise ValueError(\u0026#39;ItemId and Data cannot be empty\u0026#39;) if len(item_id) \u0026gt; 100: raise ValueError(\u0026#39;ItemId cannot exceed 100 characters\u0026#39;) if len(data) \u0026gt; 1000: raise ValueError(\u0026#39;Data cannot exceed 1000 characters\u0026#39;) # Add timestamp and unique identifier for better tracking timestamp = datetime.utcnow().isoformat() + \u0026#39;Z\u0026#39; # Prepare item for DynamoDB item = { \u0026#39;ItemId\u0026#39;: item_id, \u0026#39;Data\u0026#39;: data, \u0026#39;CreatedAt\u0026#39;: timestamp, \u0026#39;UpdatedAt\u0026#39;: timestamp } # Save to DynamoDB table.put_item(Item=item) print(f\u0026#34;Successfully saved item: {item_id}\u0026#34;) # Log for debugging return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: \u0026#39;Dữ liệu đã được lưu thành công!\u0026#39;, \u0026#39;itemId\u0026#39;: item_id, \u0026#39;timestamp\u0026#39;: timestamp }, ensure_ascii=False) } except json.JSONDecodeError: print(\u0026#34;Error: Invalid JSON in request body\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: \u0026#39;Invalid JSON format\u0026#39;, \u0026#39;message\u0026#39;: \u0026#39;Request body must be valid JSON\u0026#39; }, ensure_ascii=False) } except ValueError as ve: print(f\u0026#34;Validation error: {str(ve)}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: \u0026#39;Validation error\u0026#39;, \u0026#39;message\u0026#39;: str(ve) }, ensure_ascii=False) } except Exception as e: print(f\u0026#34;Unexpected error: {str(e)}\u0026#34;) # Log error for debugging return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;headers\u0026#39;: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, Authorization\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: \u0026#39;Internal server error\u0026#39;, \u0026#39;message\u0026#39;: \u0026#39;Không thể lưu dữ liệu. Vui lòng thử lại sau.\u0026#39; }, ensure_ascii=False) } Nhấn Deploy để lưu code. Bạn đã tạo thành công 2 Lambda functions tên là ReadFunction và WriteFunction trong Region Asia Pacific (Singapore) với runtime là Python 3.9. 4. Triển khai hàm ở Region phụ (Secondary Region) Triển khai hàm ở Region phụ (Secondary Region)\nChuyển sang Region dự phòng (ví dụ: ap-northeast-1).\nLặp lại bước 2 và bước 3 để tạo cùng 2 hàm (ReadFunctionvà WriteFunction) tại Region này.\nBạn đã tạo thành công 2 Lambda functions tên là ReadFunction và WriteFunction trong Region Asia Pacific (Tokyo) với runtime là Python 3.9. "
},
{
	"uri": "//localhost:1313/vi/5-setup-api-gateway/",
	"title": "Thiết lập API Gateway ở cả hai Region",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon API Gateway Amazon API Gateway là dịch vụ được quản lý hoàn toàn giúp các nhà phát triển dễ dàng tạo, xuất bản, duy trì, giám sát và bảo mật API ở mọi quy mô. API Gateway hoạt động như \u0026ldquo;cửa ngõ\u0026rdquo; cho các ứng dụng truy cập dữ liệu, logic nghiệp vụ hoặc chức năng từ các dịch vụ backend như AWS Lambda, Amazon EC2, hoặc bất kỳ dịch vụ web nào.\nTrong bài lab này, API Gateway đóng vai trò quan trọng trong kiến trúc Serverless Failover:\nCung cấp REST API endpoints: Tạo các endpoint thống nhất cho ứng dụng frontend gọi đến Kết nối với Lambda Functions: Tích hợp với ReadFunction và WriteFunction đã tạo trước đó Hỗ trợ CORS: Cho phép frontend từ domain khác truy cập API Logging và Monitoring: Theo dõi performance và debug issues Throttling: Kiểm soát số lượng request để bảo vệ backend Lợi ích của API Gateway trong DR Strategy Multi-Region Deployment: Triển khai ở cả Primary và Secondary Region Health Check Integration: Tích hợp với Route 53 để kiểm tra tình trạng endpoint Custom Domain: Sử dụng domain riêng thay vì URL mặc định của AWS SSL/TLS: Tự động hỗ trợ HTTPS thông qua AWS Certificate Manager Nội dung Tạo API Gateway ở Region chính (Primary) Nhân bản API Gateway sang Region phụ (Secondary) "
},
{
	"uri": "//localhost:1313/vi/6-setup-dns-route53-failover/",
	"title": "Thiết lập DNS Route 53 và cấu hình Failover cho API Gateway",
	"tags": [],
	"description": "",
	"content": "Thiết lập DNS Route 53 và cấu hình Failover cho API Gateway Trong bước này, chúng ta sẽ cấu hình DNS failover tự động sử dụng Amazon Route 53 để đảm bảo tính sẵn sàng cao cho API Gateway. Khi Primary Region gặp sự cố, Route 53 sẽ tự động chuyển hướng traffic sang Secondary Region.\nTại sao cần DNS Failover? Automatic Failover: Tự động chuyển hướng traffic khi Primary Region gặp sự cố Health Monitoring: Liên tục giám sát tình trạng API endpoints Zero Manual Intervention: Không cần can thiệp thủ công khi failover xảy ra Custom Domain: Sử dụng domain riêng thay vì URL AWS mặc định SSL/TLS Security: Đảm bảo HTTPS cho tất cả requests Kiến trúc DNS Failover Route 53 Hosted Zone: Quản lý DNS cho subdomain api.turtleclouds.id.vn ACM Certificates: SSL certificates cho cả hai Region Custom Domains: API Gateway custom domains với SSL Health Checks: Giám sát tình trạng API endpoints Failover Records: Primary/Secondary routing policy Nội dung Quyết định DNS cho api.turtleclouds.id.vn Làm ACM DNS validation cho cả 2 region Tạo Custom domain cho API Gateway (mỗi region một cái) Route 53 Health check + Failover record Lưu ý quan trọng Yêu cầu trước khi bắt đầu:\nĐã có domain turtleclouds.id.vn được quản lý bởi Cloudflare API Gateway đã được tạo ở cả hai Region (Singapore và Tokyo) Lambda Functions đã hoạt động bình thường DynamoDB Global Tables đã được cấu hình Quy trình thực hiện Bước 6.1: Tạo Route 53 Hosted Zone cho subdomain api.turtleclouds.id.vn Bước 6.2: Request SSL certificates từ ACM cho cả hai Region Bước 6.3: Tạo Custom Domain Names cho API Gateway Bước 6.4: Cấu hình Health Checks và Failover Records Kết quả mong đợi Sau khi hoàn thành, bạn sẽ có:\n✅ Custom Domain: api.turtleclouds.id.vn trỏ đến API Gateway ✅ SSL/TLS: HTTPS được kích hoạt cho tất cả requests ✅ Health Monitoring: Route 53 liên tục kiểm tra tình trạng API ✅ Automatic Failover: Tự động chuyển sang Secondary Region khi cần ✅ Zero Downtime: Người dùng không bị gián đoạn dịch vụ "
},
{
	"uri": "//localhost:1313/vi/7-create-frontend-website/",
	"title": "Create the Frontend Website",
	"tags": [],
	"description": "",
	"content": "Bước 7: Create the Frontend Website Trong bước này, bạn sẽ triển khai frontend website tĩnh để giao tiếp với API. Website sử dụng HTML, Bootstrap để tạo giao diện, và JavaScript để gọi API thông qua Route 53 DNS name.\nTại sao cần Frontend Website? User Interface: Cung cấp giao diện thân thiện để test API Real-world Testing: Kiểm tra failover từ góc độ người dùng cuối Complete Solution: Hoàn thiện kiến trúc full-stack với frontend + backend Demonstration: Minh họa cách tích hợp với API Gateway thông qua custom domain Nội dung Tải source code từ GitHub Tạo S3 Bucket Chỉnh sửa cấu hình API Upload file lên S3 Enable Static Website Hosting Configuring Public Access Block Configuring Public Objects (Object ACLs) Kiểm tra Website 1. Tải source code từ GitHub Clone hoặc tải trực tiếp repository: 👉 Front-end-Workshop-Failover: https://github.com/quywork62/Front-end-Workshop-Failover-\nNếu dùng git:\ngit clone https://github.com/quywork62/Front-end-Workshop-Failover-.git Hoặc tải file ZIP và giải nén.\n2. Tạo S3 Bucket Truy cập Amazon S3 → Create bucket Đặt tên bucket: api.turtleclouds.id.vn (Tên bucket phải trùng chính xác domain bạn sẽ sử dụng để host website) Region: chọn ap-southeast-1 (Singapore) Giữ nguyên các tùy chọn mặc định khác → Chọn Create bucket 3. Chỉnh sửa cấu hình API Trong source code, tìm file JavaScript chính (ví dụ trong index.html) và chỉnh sửa:\nconst apiUrl = \u0026#39;https://api.\u0026lt;YOUR-DOMAIN\u0026gt;\u0026#39;; // Use Route 53 DNS name ---\u0026gt; const apiUrl = \u0026#39;https://api.turtleclouds.id.vn/prod\u0026#39;; // Sử dụng Route 53 DNS name trỏ đến API Gateway Lưu ý: Đảm bảo URL API trỏ đến domain đã cấu hình trong Route 53, không phải regional domain names của API Gateway.\n4. Upload file lên S3 Vào bucket api.turtleclouds.id.vn → Upload Chọn toàn bộ file code (HTML, CSS, JS, images) từ thư mục dự án Nhấn Upload 5. Enable Static Website Hosting Vào bucket → Tab Properties Cuộn xuống phần Static website hosting → Chọn Edit Cấu hình: Static website hosting: Enable Hosting type: Host a static website Index document: index.html Nhấn Save changes 👉 Sau khi bật, bạn sẽ thấy endpoint website do S3 cung cấp:\nhttp://api.turtleclouds.id.vn.s3-website-ap-southeast-1.amazonaws.com 6. Configuring Public Access Block Mặc định, S3 chặn public access. Cần tắt để cho phép truy cập website:\nVào bucket → Tab Permissions Phần Block public access (bucket settings) → Chọn Edit Bỏ chọn \u0026ldquo;Block all public access\u0026rdquo; Chọn Save changes → Xác nhận Confirm Cảnh báo: Chỉ tắt public access block cho bucket chứa static website. Không áp dụng cho các bucket chứa dữ liệu nhạy cảm.\n7. Configuring Public Objects (Object ACLs) a. Bật ACLs trong Object Ownership\nVào bucket → Tab Permissions Phần Access controls list(ACLs) → bucket owner enforced Chọn:\nACLs enabled Bucket owner preferred Tick chọn \u0026ldquo;I acknowledge\u0026hellip;\u0026rdquo; Nhấn Save changes 👉 Sau đó bạn sẽ thấy trạng thái: Object Ownership = Bucket owner preferred (ACLs enabled)\nb. Public các file frontend\nVào tab Objects → Chọn toàn bộ file website (HTML, CSS, JS, images) Nhấn Actions → Make public using ACL Xác nhận bằng Make public 👉 Giờ đây, các file tĩnh đã công khai và có thể tải trực tiếp qua URL.\n8. Kiểm tra Website Test Static Website Endpoint:\nhttp://api.turtleclouds.id.vn.s3-website-ap-southeast-1.amazonaws.com Test Direct S3 URL:\nhttps://s3.ap-southeast-1.amazonaws.com/api.turtleclouds.id.vn/index.html Kết quả Sau khi hoàn thành bước này:\n✅ S3 Bucket đã được tạo và cấu hình ✅ Static Website Hosting đã được kích hoạt ✅ Frontend Code đã được upload và public ✅ Website có thể truy cập qua S3 endpoint ✅ API Integration hoạt động với Route 53 domain Troubleshooting Nếu website không load:\nKiểm tra Block public access đã tắt Verify Object ACLs đã được set public Đảm bảo index.html tồn tại trong bucket root Nếu API calls fail:\nKiểm tra CORS configuration trên API Gateway Verify Route 53 records đã propagate Test API endpoint trực tiếp bằng curl Chuẩn bị cho bước tiếp theo Website frontend giờ đã sẵn sàng để test toàn bộ kiến trúc high availability. Bạn có thể test failover scenarios và monitor health checks từ giao diện người dùng.\n"
},
{
	"uri": "//localhost:1313/vi/8-test-failover-delete-primary-api/",
	"title": "Kiểm thử cơ chế chuyển đổi dự phòng bằng cách xóa API ở primary (Singapore)",
	"tags": [],
	"description": "",
	"content": "Trong bước này, ta sẽ xóa hẳn API ở region Singapore (ap-southeast-1) để kiểm chứng cơ chế Failover sang region Secondary (Tokyo).\n⚠️ Lưu ý quan trọng: Việc này không thể hoàn nguyên nếu bạn chưa export API. Vì vậy nên export trước khi xóa để có thể khôi phục sau.\nTại sao cần Test Failover? Validate Architecture: Xác minh cơ chế failover hoạt động đúng Real-world Simulation: Mô phỏng tình huống thực tế khi Primary Region gặp sự cố Business Continuity: Đảm bảo dịch vụ không bị gián đoạn Confidence Building: Tạo niềm tin vào hệ thống High Availability Nội dung (Tùy chọn) Export API Xóa Domain Mapping (nếu có) Xóa API trên Console Kiểm tra Health Check (Route 53) Xác minh Failover 1. (Tùy chọn) Export API Điều hướng đến API Gateway → APIs → chọn HighAvailabilityAPI Vào Stages → chọn prod Chọn Export để tải file Swagger/OpenAPI definition 👉 Lưu file này để khôi phục hoặc redeploy lại API nếu cần.\n2. Xóa Domain Mapping (nếu có) Một số tài khoản AWS yêu cầu gỡ domain mapping trước khi xóa API.\nThao tác:\nVào Custom domain names → chọn domain Chọn Delete API mapping 3. Xóa API trên Console Quay lại APIs → chọn HighAvailabilityAPI Chọn Actions → Delete Gõ delete để xác nhận Hoặc qua AWS CLI:\nLấy danh sách API ở Singapore:\naws apigateway get-rest-apis --region ap-southeast-1 Xóa API:\naws apigateway delete-rest-api \\ --rest-api-id \u0026lt;API_ID\u0026gt; \\ --region ap-southeast-1 4. Kiểm tra Health Check (Route 53) Sau khi API Singapore bị xóa, health check của Primary sẽ báo Unhealthy (HTTP 404/403).\nRoute 53 sẽ tự động failover toàn bộ traffic sang Secondary (Tokyo – ap-northeast-1).\nTruy cập Route 53 → Health checks Kiểm tra status của Primary Singapore health check Status sẽ chuyển từ Success → Failure Kiểm tra Frontend Website:\nTrong lúc chờ health check phát hiện lỗi, bạn có thể test frontend website để thấy sự thay đổi:\nTruy cập frontend website: http://api.turtleclouds.id.vn.s3-website-ap-southeast-1.amazonaws.com Thử các chức năng CRUD Ban đầu có thể gặp lỗi khi API Singapore vừa bị xóa Sau 2-3 phút, website sẽ hoạt động bình thường trở lại khi traffic được chuyển sang Tokyo Lưu ý: Health check có thể mất 2-3 phút để phát hiện lỗi và trigger failover.\n5. Xác minh Failover Cách 1: Test trực tiếp trong Route 53\nVào Route 53 Console → Hosted zones → chọn domain api.turtleclouds.id.vn Nhấn Test record Nhập:\nRecord name: api.turtleclouds.id.vn Record type: A Nhấn Test 👉 Nếu failover thành công, record sẽ resolve sang IP ở Tokyo (ap-northeast-1) thay vì Singapore.\nCách 2: Xác minh IP thực tế\nKiểm tra DNS/IP từ terminal:\ndig api.turtleclouds.id.vn Hoặc trên Windows PowerShell:\nResolve-DnsName api.turtleclouds.id.vn 👉 Kết quả sẽ hiển thị danh sách IP (ví dụ: 35.74.x.x, 52.199.x.x, 52.193.x.x) — tất cả thuộc Tokyo region.\nCách 3: Reverse DNS để xác định Region\nTrên Linux/Mac:\nhost \u0026lt;IP\u0026gt; Trên Windows PowerShell:\nResolve-DnsName \u0026lt;IP\u0026gt; -Type PTR 👉 Nếu kết quả hiển thị ap-northeast-1 (Tokyo) → chứng tỏ failover thành công. 🎉\nKết quả mong đợi ✅ API ở Singapore đã bị xóa\n✅ Health check chuyển sang Unhealthy\n✅ Route 53 failover sang Tokyo (ap-northeast-1)\n✅ Truy cập domain api.turtleclouds.id.vn sẽ trả về response từ API Tokyo\nMonitoring và Verification CloudWatch Metrics:\nRoute 53 Health Check status changes API Gateway request metrics (should show 0 for Singapore, increased for Tokyo) Lambda invocation metrics shift to Tokyo region Timeline Expectations:\n0-2 minutes: API deletion completed 2-5 minutes: Health check detects failure 5-7 minutes: DNS failover propagation 7+ minutes: All traffic routed to Tokyo Troubleshooting Nếu failover không hoạt động:\nKiểm tra Health Check configuration Verify Failover records setup đúng Check DNS TTL settings Ensure Tokyo API và Lambda functions hoạt động bình thường Nếu muốn khôi phục Singapore API:\nImport lại API từ exported file Redeploy Lambda functions Recreate Custom Domain mapping Wait for Health Check to recover Kết luận Bạn đã thành công kiểm chứng cơ chế Serverless Failover hoạt động tự động và hiệu quả. Hệ thống có khả năng:\nTự động phát hiện lỗi thông qua Route 53 Health Checks Chuyển đổi traffic sang Region dự phòng trong vòng 5-7 phút Duy trì tính liên tục của dịch vụ mà không cần can thiệp thủ công Đảm bảo data consistency nhờ DynamoDB Global Tables Chúc mừng! Bạn đã xây dựng thành công một kiến trúc High Availability Serverless với khả năng chịu lỗi và tự động phục hồi.\n"
},
{
	"uri": "//localhost:1313/vi/9-clean-up-resources/",
	"title": "Xóa tài nguyên (Clean Up)",
	"tags": [],
	"description": "",
	"content": "Bước 9: Xóa tài nguyên (Clean Up) Sau khi đã test thành công cơ chế HA/DR \u0026amp; Failover, bạn cần xóa các tài nguyên AWS đã tạo để tránh phát sinh chi phí.\n⚠️ Cảnh báo: Việc xóa tài nguyên là không thể hoàn nguyên. Hãy chắc chắn bạn đã backup/export mọi thứ cần thiết trước khi thực hiện.\nTại sao cần Clean Up? Cost Optimization: Tránh phát sinh chi phí không cần thiết Resource Management: Giữ tài khoản AWS gọn gàng Security: Loại bỏ các endpoint và resource không sử dụng Best Practice: Thói quen tốt trong quản lý cloud resources Nội dung Xóa API Gateway (Secondary – Tokyo) Xóa DynamoDB Global Tables Xóa Lambda Functions Xóa Route 53 Health Checks \u0026amp; DNS Records Xóa ACM Certificates Xóa S3 Bucket (Frontend Website) Xóa IAM Roles 1. Xóa API Gateway (Secondary – Tokyo) Bước 1: Xóa Custom Domain Mapping (nếu có)\nVào API Gateway tại region Tokyo (ap-northeast-1) Chọn Custom domain names → chọn api.turtleclouds.id.vn Tab API mappings → Delete API mapping Bước 2: Xóa API Gateway\nQuay lại APIs → chọn HighAvailabilityAPI Chọn Actions → Delete Gõ delete để xác nhận Bước 3: Xóa Custom Domain\nVào Custom domain names → chọn api.turtleclouds.id.vn Chọn Actions → Delete domain name Gõ tên domain để xác nhận CLI (tùy chọn):\n# Lấy danh sách API aws apigateway get-rest-apis --region ap-northeast-1 # Xóa API mapping trước aws apigateway delete-base-path-mapping \\ --domain-name api.turtleclouds.id.vn \\ --base-path \u0026#34;\u0026#34; \\ --region ap-northeast-1 # Xóa API aws apigateway delete-rest-api --rest-api-id \u0026lt;API_ID\u0026gt; --region ap-northeast-1 # Xóa custom domain aws apigateway delete-domain-name \\ --domain-name api.turtleclouds.id.vn \\ --region ap-northeast-1 Lưu ý: API Gateway ở Singapore đã bị xóa trong bước test failover trước đó.\n2. Xóa DynamoDB Global Tables Bước 1: Xóa Global Table Replicas\nVào DynamoDB ở region Tokyo (ap-northeast-1) Chọn bảng HighAvailabilityTable Tab Global Tables → Delete replica Bước 2: Xóa Primary Table\nChuyển về region Singapore (ap-southeast-1) Chọn bảng HighAvailabilityTable Actions → Delete table Gõ delete để xác nhận CLI (tùy chọn):\n# Xóa replica ở Tokyo aws dynamodb delete-table --table-name HighAvailabilityTable --region ap-northeast-1 # Xóa primary table ở Singapore aws dynamodb delete-table --table-name HighAvailabilityTable --region ap-southeast-1 3. Xóa Lambda Functions Xóa Lambda Functions ở Tokyo:\nVào Lambda ở region Tokyo (ap-northeast-1) Xóa các functions: ReadFunction WriteFunction DeleteFunction Xóa Lambda Functions ở Singapore:\nVào Lambda ở region Singapore (ap-southeast-1) Xóa các functions tương tự (nếu còn) CLI (tùy chọn):\n# Tokyo aws lambda delete-function --function-name ReadFunction --region ap-northeast-1 aws lambda delete-function --function-name WriteFunction --region ap-northeast-1 aws lambda delete-function --function-name DeleteFunction --region ap-northeast-1 # Singapore aws lambda delete-function --function-name ReadFunction --region ap-southeast-1 aws lambda delete-function --function-name WriteFunction --region ap-southeast-1 aws lambda delete-function --function-name DeleteFunction --region ap-southeast-1 4. Xóa Route 53 Health Checks \u0026amp; DNS Records Bước 1: Xóa Health Checks\nVào Route 53 Console → Health checks Xóa health checks: Primary Singapore Secondary Tokyo Bước 2: Xóa DNS Records\nVào Hosted zones → api.turtleclouds.id.vn Xóa các bản ghi failover: Primary failover record Secondary failover record ACM validation CNAME records Bước 3: Xóa Hosted Zone (tùy chọn)\nNếu không cần nữa, có thể xóa luôn hosted zone api.turtleclouds.id.vn Actions → Delete hosted zone Cảnh báo: Chỉ xóa hosted zone nếu bạn chắc chắn không sử dụng subdomain api.* nữa.\n5. Xóa ACM Certificates Xóa Certificate ở Singapore:\nVào AWS Certificate Manager (ACM) ở region Singapore (ap-southeast-1) Chọn certificate api.turtleclouds.id.vn Actions → Delete Xóa Certificate ở Tokyo:\nVào ACM ở region Tokyo (ap-northeast-1) Xóa certificate tương tự Lưu ý: Certificates chỉ có thể xóa khi không còn được sử dụng bởi bất kỳ resource nào.\n6. Xóa S3 Bucket (Frontend Website) Bước 1: Empty Bucket\nVào S3 Console → bucket api.turtleclouds.id.vn Chọn Empty bucket Gõ permanently delete để xác nhận Bước 2: Delete Bucket\nSau khi empty, chọn Delete bucket Gõ tên bucket để xác nhận CLI (tùy chọn):\n# Empty bucket aws s3 rm s3://api.turtleclouds.id.vn --recursive # Delete bucket aws s3 rb s3://api.turtleclouds.id.vn 7. Xóa IAM Roles Vào IAM Console → Roles Xóa các roles đã tạo cho Lambda: HighAvailabilityLambdaRole Các roles khác liên quan đến project CLI (tùy chọn):\n# Detach policies trước aws iam detach-role-policy --role-name HighAvailabilityLambdaRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Xóa role aws iam delete-role --role-name HighAvailabilityLambdaRole Checklist Clean Up Sau khi hoàn thành, hãy kiểm tra:\n✅ API Gateway (cả Singapore và Tokyo) đã bị xóa ✅ DynamoDB Global Tables đã bị xóa hoàn toàn ✅ Lambda Functions ở cả hai regions đã bị xóa ✅ Route 53 Health Checks đã bị xóa ✅ Route 53 DNS Records đã bị xóa ✅ ACM Certificates ở cả hai regions đã bị xóa ✅ S3 Bucket và contents đã bị xóa ✅ IAM Roles không cần thiết đã bị xóa Kết luận Bạn đã thành công xóa toàn bộ tài nguyên AWS được tạo trong lab này. Điều này giúp:\nTránh chi phí không cần thiết Giữ tài khoản AWS sạch sẽ Áp dụng best practices trong quản lý cloud resources Hoàn thành chu trình development và testing Hoàn thành! Bạn đã successfully clean up tất cả resources và hoàn thành lab Serverless Failover Architecture.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]